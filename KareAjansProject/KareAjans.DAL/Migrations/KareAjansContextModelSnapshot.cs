// <auto-generated />
using System;
using KareAjans.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KareAjans.DAL.Migrations
{
    [DbContext(typeof(KareAjansContext))]
    partial class KareAjansContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KareAjans.Entity.Entities.Adres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AcikAdres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Sehir")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Adresler");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcikAdres = "Yeni Mah. No:89 D:4 Pendik",
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 177, DateTimeKind.Local).AddTicks(388),
                            IsActive = true,
                            Sehir = "İstanbul",
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AcikAdres = "Cumhuriyet Mah. No:8 D:9 Kartal",
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 178, DateTimeKind.Local).AddTicks(1518),
                            IsActive = true,
                            Sehir = "İstanbul",
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AcikAdres = "Zaman Mah. No:30 Kızılay",
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 178, DateTimeKind.Local).AddTicks(1524),
                            IsActive = true,
                            Sehir = "Ankara",
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Fotograf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MankenId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MankenId");

                    b.ToTable("Fotograflar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 178, DateTimeKind.Local).AddTicks(8851),
                            IsActive = true,
                            MankenId = 1,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 178, DateTimeKind.Local).AddTicks(9036),
                            IsActive = true,
                            MankenId = 2,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 178, DateTimeKind.Local).AddTicks(9038),
                            IsActive = true,
                            MankenId = 2,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Manken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("AyakkabıNo")
                        .HasColumnType("int");

                    b.Property<int>("Beden")
                        .HasColumnType("int");

                    b.Property<short>("Boy")
                        .HasColumnType("smallint");

                    b.Property<int>("Cinsiyet")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DogumTarihi")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Ehliyet")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GozRengi")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Kategori")
                        .HasColumnType("int");

                    b.Property<decimal>("Kilo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SacRengi")
                        .HasColumnType("int");

                    b.Property<bool>("SehirDisiCalisma")
                        .HasColumnType("bit");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TelefonNo")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("TelefonNo2")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("YabanciDil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Özellik")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Mankenler");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ad = "Ayşe",
                            Adres = "Yeni Mah. Pendik/İstanbul",
                            AyakkabıNo = 36,
                            Beden = 2,
                            Boy = (short)160,
                            Cinsiyet = 0,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 179, DateTimeKind.Local).AddTicks(2980),
                            DogumTarihi = new DateTime(2010, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ehliyet = false,
                            Email = "a@gmail.com",
                            GozRengi = 3,
                            IsActive = true,
                            Kategori = 1,
                            Kilo = 45m,
                            SacRengi = 0,
                            SehirDisiCalisma = true,
                            Soyad = "Alev",
                            Status = 1,
                            TelefonNo = "905058529632",
                            TelefonNo2 = "905328547896",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            YabanciDil = "İngilizce,Almanca",
                            Özellik = "Girişken"
                        },
                        new
                        {
                            Id = 2,
                            Ad = "Ahmet",
                            Adres = "Eski Mah. Kadıköy/İstanbul",
                            AyakkabıNo = 41,
                            Beden = 4,
                            Boy = (short)180,
                            Cinsiyet = 1,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 179, DateTimeKind.Local).AddTicks(5068),
                            DogumTarihi = new DateTime(1995, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ehliyet = true,
                            Email = "b@gmail.com",
                            GozRengi = 1,
                            IsActive = true,
                            Kategori = 2,
                            Kilo = 75m,
                            SacRengi = 0,
                            SehirDisiCalisma = true,
                            Soyad = "Can",
                            Status = 1,
                            TelefonNo = "905529529632",
                            TelefonNo2 = "905368548596",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            YabanciDil = "İngilizce",
                            Özellik = "Girişken"
                        },
                        new
                        {
                            Id = 3,
                            Ad = "Fatma",
                            Adres = "Güzel Mah. Ümraniye/İstanbul",
                            AyakkabıNo = 37,
                            Beden = 2,
                            Boy = (short)170,
                            Cinsiyet = 0,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 179, DateTimeKind.Local).AddTicks(5100),
                            DogumTarihi = new DateTime(1997, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ehliyet = false,
                            Email = "c@gmail.com",
                            GozRengi = 0,
                            IsActive = true,
                            Kategori = 3,
                            Kilo = 55m,
                            SacRengi = 5,
                            SehirDisiCalisma = false,
                            Soyad = "Kalyon",
                            Status = 1,
                            TelefonNo = "905638512632",
                            TelefonNo2 = "905985647896",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            YabanciDil = "İspanyolca",
                            Özellik = "Girişken"
                        },
                        new
                        {
                            Id = 4,
                            Ad = "Ayşegül",
                            Adres = "Yeni Mah. Levent/İstanbul",
                            AyakkabıNo = 37,
                            Beden = 3,
                            Boy = (short)165,
                            Cinsiyet = 0,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 179, DateTimeKind.Local).AddTicks(5103),
                            DogumTarihi = new DateTime(2018, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ehliyet = true,
                            Email = "d@gmail.com",
                            GozRengi = 4,
                            IsActive = true,
                            Kategori = 3,
                            Kilo = 45m,
                            SacRengi = 0,
                            SehirDisiCalisma = true,
                            Soyad = "Ay",
                            Status = 1,
                            TelefonNo = "905075329632",
                            TelefonNo2 = "905328253496",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            YabanciDil = "",
                            Özellik = "Sıcak Kanlı"
                        });
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BaslangicTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BitisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Onaylama")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizasyonAdresi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizasyonNumarasi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizasyonSehirAdresi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Kategori")
                        .HasColumnType("int");

                    b.Property<int>("MankenId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MankenId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Organizasyon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdresId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BaslangicTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BitisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizasyonAdi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdresId");

                    b.ToTable("Organizasyonlar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdresId = 1,
                            BaslangicTarihi = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BitisTarihi = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 179, DateTimeKind.Local).AddTicks(6787),
                            IsActive = true,
                            OrganizasyonAdi = "A standı",
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AdresId = 2,
                            BaslangicTarihi = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BitisTarihi = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 179, DateTimeKind.Local).AddTicks(7338),
                            IsActive = true,
                            OrganizasyonAdi = "A standı",
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AdresId = 2,
                            BaslangicTarihi = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BitisTarihi = new DateTime(2023, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 179, DateTimeKind.Local).AddTicks(7340),
                            IsActive = true,
                            OrganizasyonAdi = "A standı",
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.OrganizasyonGelir", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Butce")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizasyonId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizasyonId");

                    b.ToTable("OrganizasyonGelirler");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Butce = 25000m,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 179, DateTimeKind.Local).AddTicks(8524),
                            IsActive = true,
                            OrganizasyonId = 1,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Butce = 35000m,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 179, DateTimeKind.Local).AddTicks(8769),
                            IsActive = true,
                            OrganizasyonId = 2,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Butce = 45000m,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 179, DateTimeKind.Local).AddTicks(8770),
                            IsActive = true,
                            OrganizasyonId = 3,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.OrganizasyonGider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Butce")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GunSayisi")
                        .HasColumnType("int");

                    b.Property<decimal>("GunlukUcret")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("KategoriUcMankenSayisi")
                        .HasColumnType("int");

                    b.Property<decimal>("KonaklamaUcreti")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MankenId")
                        .HasColumnType("int");

                    b.Property<decimal>("OgunUcreti")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrganizasyonId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MankenId");

                    b.HasIndex("OrganizasyonId");

                    b.ToTable("OrganizasyonGiderler");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Butce = 25000m,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 180, DateTimeKind.Local).AddTicks(837),
                            GunSayisi = 5,
                            GunlukUcret = 500m,
                            IsActive = true,
                            KategoriUcMankenSayisi = 0,
                            KonaklamaUcreti = 500m,
                            MankenId = 1,
                            OgunUcreti = 150m,
                            OrganizasyonId = 1,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Butce = 25000m,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 180, DateTimeKind.Local).AddTicks(1476),
                            GunSayisi = 5,
                            GunlukUcret = 1000m,
                            IsActive = true,
                            KategoriUcMankenSayisi = 0,
                            KonaklamaUcreti = 500m,
                            MankenId = 2,
                            OgunUcreti = 150m,
                            OrganizasyonId = 1,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Butce = 25000m,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 180, DateTimeKind.Local).AddTicks(1478),
                            GunSayisi = 2,
                            GunlukUcret = 0m,
                            IsActive = true,
                            KategoriUcMankenSayisi = 2,
                            KonaklamaUcreti = 500m,
                            MankenId = 3,
                            OgunUcreti = 150m,
                            OrganizasyonId = 2,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Butce = 25000m,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 180, DateTimeKind.Local).AddTicks(1549),
                            GunSayisi = 2,
                            GunlukUcret = 0m,
                            IsActive = true,
                            KategoriUcMankenSayisi = 2,
                            KonaklamaUcreti = 500m,
                            MankenId = 4,
                            OgunUcreti = 150m,
                            OrganizasyonId = 2,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Yorum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MankenId")
                        .HasColumnType("int");

                    b.Property<string>("Mesaj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MankenId");

                    b.ToTable("Yorumlar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 180, DateTimeKind.Local).AddTicks(2410),
                            IsActive = true,
                            MankenId = 1,
                            Mesaj = "İlerlemesi güzel",
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 180, DateTimeKind.Local).AddTicks(2601),
                            IsActive = true,
                            MankenId = 2,
                            Mesaj = "Çok sessiz",
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 8, 6, 3, 12, 49, 180, DateTimeKind.Local).AddTicks(2603),
                            IsActive = true,
                            MankenId = 2,
                            Mesaj = "Çok sessiz",
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Fotograf", b =>
                {
                    b.HasOne("KareAjans.Entity.Entities.Manken", "Manken")
                        .WithMany("Fotograflar")
                        .HasForeignKey("MankenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manken");
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Manken", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Order", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.OrderDetail", b =>
                {
                    b.HasOne("KareAjans.Entity.Entities.Manken", "Manken")
                        .WithMany()
                        .HasForeignKey("MankenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KareAjans.Entity.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manken");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Organizasyon", b =>
                {
                    b.HasOne("KareAjans.Entity.Entities.Adres", "Adres")
                        .WithMany("Organizasyonlar")
                        .HasForeignKey("AdresId");

                    b.Navigation("Adres");
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.OrganizasyonGelir", b =>
                {
                    b.HasOne("KareAjans.Entity.Entities.Organizasyon", "Organizasyon")
                        .WithMany("OrganizasyonGelir")
                        .HasForeignKey("OrganizasyonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizasyon");
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.OrganizasyonGider", b =>
                {
                    b.HasOne("KareAjans.Entity.Entities.Manken", "Manken")
                        .WithMany()
                        .HasForeignKey("MankenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KareAjans.Entity.Entities.Organizasyon", "Organizasyon")
                        .WithMany("OrganizasyonGiderleri")
                        .HasForeignKey("OrganizasyonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manken");

                    b.Navigation("Organizasyon");
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Yorum", b =>
                {
                    b.HasOne("KareAjans.Entity.Entities.Manken", "Manken")
                        .WithMany("Yorumlar")
                        .HasForeignKey("MankenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manken");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Adres", b =>
                {
                    b.Navigation("Organizasyonlar");
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Manken", b =>
                {
                    b.Navigation("Fotograflar");

                    b.Navigation("Yorumlar");
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("KareAjans.Entity.Entities.Organizasyon", b =>
                {
                    b.Navigation("OrganizasyonGelir");

                    b.Navigation("OrganizasyonGiderleri");
                });
#pragma warning restore 612, 618
        }
    }
}
